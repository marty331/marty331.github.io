{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Pillar Consulting","text":""},{"location":"#about-us","title":"About Us","text":"<p>Pillar Consulting was founded in 2006 in Dallas, TX focusing on ERP implementations of PeopleSoft Financials. </p> <p>In 2013 we relocated our offices to Houston, TX where we remain today. As we progressed over the years we shifted our focus from supporting and implementing ERP systems to designing and building mobile and web applications. </p> <p>Around 2016 we primarily shifted our focus to creating web applications for enterprise and small businesses. </p> <p>Today, Marty works full time for a large technology company and this site remains up to house previous blog posts and new posts that Marty feels can be beneficial to himself and the technology community.</p> <p></p> <p>Founder: Marty Ballard</p> <p>Marty started Pillar after working for large consulting firms and dreaming of doing it better and faster for his customers. As an avid technology enthusiast, Marty is usually working on cutting edge technologies well before the masses know they exist.</p> <p>Check out Marty's work on Github.</p>"},{"location":"contact/","title":"Contact","text":"Network Username/URL Github Marty331 Linked In Marty Ballard Mastodon Headpunk"},{"location":"blogs/A_Beginners_Guide_to_TypeScript/","title":"A Beginner's guide to TypeScript","text":"A Beginner's Guide to TypeScript <p>TypeScript is a programming language that is a superset of JavaScript, meaning that it contains all the features of JavaScript but also adds some additional features. It was developed and is maintained by Microsoft, and is commonly used for building large-scale applications.</p> <p>One of the main benefits of using TypeScript is its static type checking, which allows for type errors to be caught during development rather than at runtime. This can save time and prevent potential bugs in the code.</p> <p>Another advantage of TypeScript is its support for object-oriented programming. This allows for the creation of classes, interfaces, and modules, which can help to organize and manage the codebase.</p> <p>To get started with TypeScript, you will need to first install the TypeScript compiler, which can be done through npm (the package manager for JavaScript). Once installed, you can create a TypeScript file by adding a \".ts\" extension to the file name.</p> <p>To compile a TypeScript file, you can use the command \"tsc filename.ts\" in the terminal. This will generate a JavaScript file with the same name, which can then be run in the browser or in a Node.js environment.</p> <p>One important thing to note is that TypeScript is a typed language, meaning that you must declare the type of each variable. This can be done by using the \": type\" syntax after the variable name, for example:</p> <pre><code>\nlet name: string = \"John\";\n</code></pre> <p>In addition to basic types such as string, number, and boolean, TypeScript also supports more advanced types such as enums, tuples, and arrays.</p> <p>Another key concept in TypeScript is interfaces, which allow you to define the shape of an object. This can be useful for defining the structure of an object that will be used in multiple places in the code.</p> <p>For example, you can define an interface for a person as follows:</p> <pre><code>\ninterface Person { name: string; age: number; address: string; }\n</code></pre> <p>You can then create an object that implements this interface, such as:</p> <pre><code>\nlet john: Person = { name: \"John\", age: 30, address: \"123 Main St\" };\n</code></pre> <p>In addition to interfaces, TypeScript also supports classes, which allow you to define the structure and behavior of objects. This can be useful for creating reusable components and implementing inheritance.</p> <p>For example, you can create a class for a person as follows:</p> <pre><code>\nclass Person { \n    name: string; \n    age: number; \n    address: string;\n\n     constructor(name: string, age: number, address: string) { \n         this.name = name; \n         this.age = age; \n         this.address = address; \n     }\n\n    getName() { \n        return this.name; \n    } \n}\n</code></pre> <p>You can then create an instance of this class and call its methods, such as:</p> <pre><code>\nlet john = new Person(\"John\", 30, \"123 Main St\"); \nconsole.log(john.getName()); // prints \"John\"\n</code></pre> <p>In conclusion, TypeScript is a powerful programming language that offers many benefits for building large-scale applications. With its static type checking and support for object-oriented programming, it can help to improve code quality and maintainability. By following the steps outlined in this beginner's guide, you can start using TypeScript in your own projects and take advantage of its features.</p> <p>Header Photo by CARYN MORGAN: https://www.pexels.com/photo/typewriter-keys-938165/</p>"},{"location":"blogs/How%20To%20Test%20JavaScript%20Functions%20in%20VSCode/","title":"How To Test JavaScript Functions in VSCode","text":"How To Test JavaScript Functions in VSCode <p> How to Test JavaScript Functions in VSCode ==========================================</p> <p>So oftentimes I'll find myself writing a function for React or Angular and I just want a really quick way to test this function without firing up the app.\u00a0 Here's a really quck and simple way to do just that.</p> <p>Create a directory for JavaScript functions, and then a new file for your function.\u00a0 Copy your function into that new file and then you can simply test it by running it with Node inside VSCode.\u00a0 You may need to create data to be processed as well, in my case I created an array of objects called data.</p> <p>After you have the file created, open a terminal right in VSCode from the top menu - Terminal &gt; New Terminal.\u00a0 Then you simply run the file using node as such -</p> <pre><code>\nnode &lt;filename&gt;\n\n// example\nnode array.js\n</code></pre> <p>Here's a quick video below to show you how it looks.   I hope this saves you a bit of time.</p>"},{"location":"blogs/How%20to%20Install%20Docker%20CE%20on%20RHEL%208%20Behind%20Corporate%20Firewall/","title":"How to Install Docker CE on RHEL 8 Behind Corporate Firewall","text":"How to Install Docker CE on RHEL 8 Behind Corporate Firewall <p> So I've been assigned a task at my current client, they want me to build out a CI/CD pipeline using some new on prem servers they have purchased.\u00a0 The good thing is they are Linux, but the not so good thing is they are RedHat.\u00a0 RedHat isn't bad by any means, but I'm much more familar with Debian.\u00a0 So it's been a bit of a learning curve.</p> <p>Today I'm going to document how to setup Docker CE on a RHEL 8 server behind a corporate firewall and using a proxy.\u00a0 The corporate firewall can really throw a wrench in setting up anything, fortunately they also have a proxy.\u00a0 The way I'm setting this up reqires root, so if you don't have root you may need to adjust the commands below.\u00a0 I've made this pretty easy if you just follow along it can be done in a few minutes.</p> <pre><code>\nInstall Docker\n- Add proxy to /etc/dnf/dnf.conf - `proxy=http://&lt;proxy-url&gt;:&lt;proxy-port&gt;`\n- Enable Docker CE Repository - `dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo`\n- Verify Repository availability and install - `dnf list docker-ce`\n- Install Docker CD using dnf Command - `dnf install docker-ce --nobest -y`\n- Start Docker - `systemctl start docker`\n- Enable Docker - `systemctl enable docker`\n- Validatate Docker is running - `docker --version`\n\nSet Docker Proxy\n- Create drop-in - `mkdir /etc/systemd/system/docker.service.d`\n- Create http-proxy.conf `touch /etc/systemd/system/docker.service.d/http-proxy.conf`\n- Populate Proxy data - `[Service]\nEnvironment=\"HTTPS_PROXY=http://&lt;proxy-url&gt;:&lt;proxy-port&gt;\"\nEnvironment=\"HTTP_PROXY=http://&lt;proxy-url&gt;:&lt;proxy-port&gt;\"`\n- Reload systemd daemon - `systemctl daemon-reload`\n- Restart docker - `systemctl restart docker`\n- Verify config has been loaded `systemctl show docker --property Environment`\n- Test Docker - `docker run hello-world`\n\n</code></pre> <p>At this piont you should have docker running on the server!\u00a0 \ud83c\udf89\u00a0 There is one more thing that I needed to do as I use docker-compose and this was not available.\u00a0 Follow the remaining steps to install docker-compose and then you can really use docker.</p> <pre><code>\nInstall Docker-Compose\ncurl -x http://&lt;proxy-url&gt;:&lt;proxy-port&gt; -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n</code></pre> <p>And with that docker-compose is setup.</p> <p>You should now have docker and docker-compose fully setup and ready to go.</p> <p>Make sure to follow LearningToFly for more tips and tricks.</p> <p>Header image - Photo by Julius Silver from Pexels</p>"},{"location":"blogs/How%20to%20Search%20an%20Array%20of%20Objects%20in%20JavaScript%20%28React%29/","title":"How to Search an Array of Objects in JavaScript (React)","text":"How to Search an Array of Objects in JavaScript (React) <p>  =======================================================</p> <p>Before we dive in, I wanted to let you know that I'm writing this post for me, for future me.\u00a0 I was tasked with creating the search functionality, for a client, and they wanted to be able to search across multiple tabs and categories and have the resutls update in real time.\u00a0 I spent a lot of time figuring this out where everything worked across tabs and categories but what I'm presenting here is the meat of the functionality.\u00a0 If you've stumbled on to this post, I hope it saves you some time.</p>"},{"location":"blogs/How%20to%20Search%20an%20Array%20of%20Objects%20in%20JavaScript%20%28React%29/#the-search-function","title":"The Search Function","text":"<p>The search function is just a pure JavaScript function, there's no speacial React sauce.\u00a0 There are two parameters that are required, the array that you'll be searching through and the keyword that the user wants to search for.</p> <p>The first step is to convert the keyword to lowercase, this is done to make matching work as we'll be doing the same for the values that we search through as well.</p> <p>The next step is to use the filter function on the array.\u00a0 The filter function in JavaScript returns an array of all matching elements.\u00a0 The filter function will loop through each element in the array and then test to see if it is true and if so it will be added to the results.</p> <p>The last step is the run the test on each value in the object and determine if there is a match.\u00a0 To this we convert the string (it must be a string) to lower case and then run the match function.\u00a0 The match function takes a regular expression and returns an array of all the matches, this is done by added the 'g' flag.\u00a0\u00a0</p> <p>One futher thing to note is there are three tests below and they are each seperated with the OR operator, therefore if any of the tests are true then the function will return true and the object will be added to the new filter array.\u00a0 You may easily add additional key values to test for using this method.</p> <pre><code>\nexport const arraySearch = (array, keyword) =&gt; {\n    const searchTerm = keyword.toLowerCase()\n    return array.filter(value =&gt; {\n        return value.name.toLowerCase().match(new RegExp(searchTerm, 'g')) ||\n        value.address.toLowerCase().match(new RegExp(searchTerm, 'g')) ||\n        value.gender.toLowerCase().match(new RegExp(searchTerm, 'g'))\n    })\n}\n</code></pre>"},{"location":"blogs/How%20to%20Search%20an%20Array%20of%20Objects%20in%20JavaScript%20%28React%29/#calling-the-search-function","title":"Calling the Search Function","text":"<p>Now we'll look at how to use the arraySearch function from a React component.\u00a0 Below we have a Search component that listens for an onChange event, when the onChange event is called the handleOnChange function is called (more on that in a second).\u00a0 Below the Search component is the Container which iterates through the array of objects (population) by calling the map function.\u00a0 The map function generates a person object which is then propagated into a Card object and displays the person's name, age, gender, and address.</p> <pre><code>\n&lt;div className=\"App\"&gt;\n      &lt;div&gt;Count: {count}\n      &lt;Search type=\"text\" name=\"search\" id=\"search\" placeholder=\"Search Filter\" onChange={handleOnChange}/&gt;\n      &lt;/div&gt;\n\n      &lt;Container name=\"container\"&gt;\n        {population.map(person =&gt; (\n        &lt;Card key={person.guid}&gt;\n          &lt;p&gt;Name: {person.name}&lt;/p&gt;\n          &lt;p&gt;Age: {person.age}&lt;/p&gt;\n          &lt;p&gt;Gender: {person.gender}&lt;/p&gt;\n          &lt;p&gt;Address: {person.address}&lt;/p&gt;\n        &lt;/Card&gt;\n        ))}\n      &lt;/Container&gt;\n    &lt;/div&gt;\n</code></pre> <p>As the user types in the Search box, the handle on change the handleOnChange function is called, this function retrieves the target.value from the event.\u00a0 The value is tested to see if it is greater than two in length, if so, then the population (array of objects) and the value are passed to the arraySearch function.\u00a0 The result is captured as a new variable called search and that result is then passed into the population array by calling setPopulation.\u00a0 setPopulation is the setter portion of a useState hook.\u00a0 Also captured is the length of the array, and it's passed to the count variable by calling setCount (also a useState hook).</p> <p>If the value that is passed does not have a length that is greater than two, then the orginal data set is passed to the setPopulation call and the original array length is passed to the count.</p> <pre><code>\nconst handleOnChange = async (e) =&gt; {\n    let value = e.target.value;\n    if (value.length &gt; 2) {\n      let search = await arraySearch(population, value);\n      setPopulation(search)\n      setCount(search.length)\n    } else {\n      setPopulation(people)\n      setCount(people.length)\n    }\n  }\n</code></pre>"},{"location":"blogs/How%20to%20Search%20an%20Array%20of%20Objects%20in%20JavaScript%20%28React%29/#see-it-in-action","title":"See it in Action","text":"<p>Let's see it in action, one thing to notice is the Counter just above the Search input, as the user types the counter will update with the number of elements.\u00a0 As you'll notice in the video, when I search for 'male' the count stays at 50.\u00a0 The reason for that is the match function is searching for the existence of the string but not the whole word.\u00a0 When I search for 'female' the count changes to 21.\u00a0 Pay attention to the Count as I do the different searches.</p> <p>Thanks for reading and I hope that you found this easy to understand and clear.\u00a0 Here is the GitHub repo so you can review the entire project -\u00a0repo</p>"},{"location":"blogs/How%20to%20Setup%20an%20AWS%20SNS%20Topic%20and%20Subscription/","title":"How to Setup an AWS SNS Topic and Subscription","text":"How to Setup an AWS SNS Topic and Subscription <p> What is Amazon SNS? ===================</p> <p>Amazon SNS (Simple Notification Service) is a managed messaging service that decouples publishers from subscribers.\u00a0 It allows an application to send messages downstream to a subscriber based on user defined events.\u00a0 The SNS is composed of two major components - Topics and Subscriptions.\u00a0</p>"},{"location":"blogs/How%20to%20Setup%20an%20AWS%20SNS%20Topic%20and%20Subscription/#sns-topics","title":"SNS Topics","text":"<p>An SNS Topic is a communication channel used for sending messages or events.\u00a0 The Topic can be subscribed to by services such as Amazon SQS, HTTP/S, email, SMS, and Lambda.</p>"},{"location":"blogs/How%20to%20Setup%20an%20AWS%20SNS%20Topic%20and%20Subscription/#sns-subscription","title":"SNS Subscription","text":"<p>An SNS Subscription is the subscriber to your application (publisher), it must be one of the following - Amazon SQS, HTTP/S, email, SMS, and Lambda.\u00a0 The Subscription receives messages after an event happens in your application and is pushed to an SNS Topic.\u00a0</p>"},{"location":"blogs/How%20to%20Setup%20an%20AWS%20SNS%20Topic%20and%20Subscription/#what-youll-learn","title":"What you'll learn","text":"<p>Next we will walk through the steps for creating an SNS Topic and creating an SNS Subscription that is sent to your personal email.\u00a0 This is a great way to test that the Topic and Subscription are working correctly together and that you are successfully subscribed to the correct topic.</p>"},{"location":"blogs/How%20to%20Setup%20an%20AWS%20SNS%20Topic%20and%20Subscription/#create-topic","title":"Create Topic","text":"<p>To get started log into your AWS account and navigate to Amazon SNS.\u00a0 Unless you have previously created a Topic, this section will be blank as shown in the image above.\u00a0 Click the Create Topic button and follow the steps below.</p> <p></p> <p></p> <p>Fill out the Topic Name and Display Name.\u00a0 For the Name, follow the hints below the text box, I reccomend either underscores or dashes for spaces to allow for the best readibility.\u00a0 Once you're done, scroll to the bottom of the page and click the orange Create topic button.</p> <p></p> <p>Now you'll be redirected back to the new Topic where you'll be shown the Topic Name, Display Name, ARN (Amazon Resource Name) and the Topic Owner ID.\u00a0 You'll notice that there are no subscriptions yet, so next we will click the Create subscription button to create a subscription.</p> <p></p> <p></p> <p>Create a subscription by filling in the Topic ARN, Protocol, and Endpoint.\u00a0 As you only have one Topic ARN this will be auto populated.\u00a0 We are selecting Email as the Protocol and finally enter your email address as the Endpoint.\u00a0 At this point scroll to the bottom of the page and click the Create subscription button.</p> <p></p> <p>With the subscription created, switch to your email client and you should have an email with the title of \"AWS Notification - Subscription Confirmation\" or something similar.\u00a0 Open the email and click the Confirm subscription link.\u00a0 This is a critical step, without the confirmation you will not be confirmed and will not receive notifications.</p> <p></p> <p>Now head back to the AWS console and refresh the Demo Topic page, you should see the Status for your subsciption set to Confirmed.\u00a0 One final step, click the Publish Message button at the top of this screen to send yourself a test message.</p> <p> </p> <p>Scroll down to the Message Body section and enter in a test message to yourself and then click the Publish message button.\u00a0 Then head back to your email client to retrieve the message.</p> <p></p> <p>And there you have it, a fully functioning AWS Topic and Subscription setup.\u00a0 Very soon I will have another post on how to use AWS SNS Topics in a Python Flask application and how to test them with Pytest.</p> <p>Thanks for reading!</p>"},{"location":"blogs/How%20to%20Test%20AWS%20SNS%20Topics/","title":"How to Test AWS SNS Topics","text":"How to Test AWS SNS Topics <p>### The Problem</p> <p>Recently I had a client that I worked with who uses AWS SNS Topics to deliver notifications when an event has occurred.\u00a0 The application itself is written in Python and is a Flask app.\u00a0 Testing was core value and the project team stived to have our code coverage as high as possible.\u00a0 They are using many AWS features and most of the others have been relatively easy to test, however SNS topics were different.\u00a0</p>"},{"location":"blogs/How%20to%20Test%20AWS%20SNS%20Topics/#what-youll-learn","title":"What you'll learn","text":"<p>By the end of this post you'll learn how to test AWS SNS topics to ensure that your code is processing the data correctly and that you are successfully handling any errors.</p>"},{"location":"blogs/How%20to%20Test%20AWS%20SNS%20Topics/#prerequisites","title":"Prerequisites","text":"<p>You will need the following:</p> <p>Python3.7+ installed on your development computer.</p> <p>An active AWS account that you can access the AWS access key id and secret access key.\u00a0 If you don't have an AWS account setup already please see my guide here.</p>"},{"location":"blogs/How%20to%20Test%20AWS%20SNS%20Topics/#getting-started","title":"Getting Started","text":"<p>I'm currently using Python 3.7, so if you are using 3.7 or higher you should have no trouble.\u00a0 Change directory (cd) into your local development directory:</p> <pre><code>\ncd ~/Dev\n</code></pre> <p>Next we'll clone the inital demo project:</p> <pre><code>\ngit clone https://github.com/marty331/aws-sns-test\n</code></pre> <p>After you're done, cd into the project directory and then we'll create a virtual environment to work in and we'll activate that virtual environment.\u00a0 We do this so that the packages we install will be installed in this workspace only.</p> <pre><code>\npython -m venv env\n\nsource env/bin/activate\n</code></pre> <p>Next we'll install the following packages:</p> <pre><code>\npip install -r requirements.txt\n</code></pre>"},{"location":"blogs/How%20to%20Test%20AWS%20SNS%20Topics/#project-setup","title":"Project Setup","text":"<p>Setup an AWS SNS Topic and Subscription for testing, if you don't have one setup yet then follow my guide on how to do this here: How to Setup an AWS SNS Topic and Subscription</p> <p>Now that we have our project directory, virtual environment and initial packages setup, let's run the project, first we'll set our FLASK_APP, FLASK_ENV, and TOPIC_ARN_KEY environment variables, then we'll run the project.</p> <pre><code>\n$ export FLASK_APP=awssns\n$ export FLASK_ENV=development\n$ export TOPIC_ARN_KEY=&lt;your-topic-arn-key&gt;\n$ export AWS_REGION=us-west-1\n$ flask run\n\n\n</code></pre> <p>once this is complete, you should see some output like this:</p> <pre><code>\n* Serving Flask app \"awssns\"\n* Environment: dev\n* Debug mode: off\n* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n</code></pre> <p>and of course you'll want to visit the url in your browser, which should return back - \"Hello, World!\"</p> <p>Now we can run a simple curl command to test out our SNS topic:</p> <pre><code>\ncurl -X POST http://localhost:5000/test-sns?message=Hello%20SNS\n</code></pre> <p>Now, assuming you followed my guide linked above, you should get an email that looks something similar to this:</p> <p></p> <p>If you received the email successfully, great!\u00a0 Pat yourself on the back.\u00a0 You have sucessfully created an AWS SNS Topic and recieved a notification from it.\u00a0 You have proved it works, so blog post over right?\u00a0 Not so fast!\u00a0 Now the fun (for you) begins, we will test the SNS Topic with Pytest.</p>"},{"location":"blogs/How%20to%20Test%20AWS%20SNS%20Topics/#messagespy-review","title":"Messages.py Review","text":"<p>First, let's review the actual SNS Topic code so we can know what we need to test.\u00a0 The top section is all of the imports that we need.\u00a0 I'll skip over the standard library imports and go straight to boto3 - the main library for connecting to AWS in Python.\u00a0 If this were app I were optimizing for production I would import only the client from the boto3 library.\u00a0 Next we import the ClientError from botocore.exceptions.\u00a0 As you probably guessed, this is the error class associated with the boto3 library.\u00a0 And finally we import CFG from the cfg.py file.\u00a0 cfg.py is an building an implementation of the decouple library and gives up an easy way to reference environment variables from .env files or from environment variables.\u00a0 It also works great if you are deploying an AWS Lambda function.</p> <pre><code>\n# messages.py file\n# imports start\nimport os\nimport json\nimport logging\n\nfrom typing import Dict, Any\nfrom abc import ABC\n\nimport boto3\n\nfrom botocore.exceptions import ClientError\n\nfrom awssns.cfg import CFG\n#imports end\n\n\n</code></pre>"},{"location":"blogs/How%20to%20Test%20AWS%20SNS%20Topics/#setup-logging","title":"Setup Logging","text":"<p>We initialize our logger, keeping it very simple here and not adding in any configuration as we just want to get simple messages and feedback.</p> <pre><code>\n#initialize logger\nlogger = logging.getLogger()\n\n\n</code></pre>"},{"location":"blogs/How%20to%20Test%20AWS%20SNS%20Topics/#abstract-route","title":"Abstract Route","text":"<p>For good measure we'll create a class that extends the ABC class.\u00a0 We're only using this to initialize our payload but if you have multiple classes I reccomend creating a base class like this to inheirt from.</p> <pre><code>\n\n# create abstract class from ABC class, not 100% but good practice\nclass AbstractRoute(ABC):\n    def __init__(self, payload) -&gt; None:\n        self.payload = payload\n\n</code></pre>"},{"location":"blogs/How%20to%20Test%20AWS%20SNS%20Topics/#message-class","title":"Message Class","text":"<p>Finally we create our Message class, which will contain all of the functionality for creating the SNS Topic and sending it to AWS.\u00a0 It inheirts the AbstractRoute class and therefore must contain a payload (our message).\u00a0 We create a function (route) that will control the flow and publishing of the SNS Topic message.\u00a0</p> <pre><code>\n\n# create message class, inherit from AbscractRoute\nclass Message(AbstractRoute):\n    # function that sends the SNS message\n    def route(self) -&gt; Dict[str, Any]:\n        sns_client = self.get_sns_client()\n        response = self.publish_sns_message(\n            sns_client=sns_client, topic_arn=CFG.TOPIC_ARN_KEY, message=self.payload\n        )\n        if response[\"ResponseMetadata\"][\"HTTPStatusCode\"] == 200:\n            return response\n        return {\"ResponseMetadata\": {\"HTTPStatusCode\": 500}}\n\n\n</code></pre>"},{"location":"blogs/How%20to%20Test%20AWS%20SNS%20Topics/#get-sns-client","title":"Get SNS Client","text":"<p>A boto3 client is created for SNS Topics, this requires the service name and region name.\u00a0 The service name is \"sns\" and the region name will be something like \"us-west-1\".\u00a0 Assuming you have your AWS credentials setup correctly this this function will return back a boto3 SNS client.</p> <pre><code>\n# connect to AWS via boto3 library\n    def get_sns_client(self) -&gt; boto3.client:\n        return boto3.client(\"sns\", region_name=CFG.AWS_REGION)\n\n</code></pre>"},{"location":"blogs/How%20to%20Test%20AWS%20SNS%20Topics/#publish-sns-message","title":"Publish SNS Message","text":"<pre><code>\n# publish the message to the SNS topic\n    def publish_sns_message(\n        self, sns_client: boto3.client, topic_arn: str, message: Dict[str, Any]\n    ) -&gt; Dict[str, Any]:\n        try:\n            response = sns_client.publish(\n                TopicArn=topic_arn,\n                Message=json.dumps(\n                    {\"default\": message}\n                ),  # json.dumps is required by FxA\n                MessageStructure=\"json\",\n            )\n            return response\n        except ClientError as e:\n            logger.error(\"SNS error\", error=e)\n            raise e\n</code></pre>"},{"location":"blogs/How%20to%20find%20the%20number%20of%20decimals%20in%20a%20number%20minus%20the%20trailing%20zeros%20in%20TypeScript/","title":"How to find the number of decimals in a number minus the trailing zeros in Typescript","text":"How to find the number of decimals in a number minus the trailing zeros in TypeScript <p> Finding the number of decimals in a number minus the trailing zeros can be a useful skill in many situations, such as when dealing with financial data or precision calculations. In Typescript, there are several ways to accomplish this without converting the number to a string.</p> <p>One approach is to use the built-in Math.log10() function, which returns the base 10 logarithm of a number. We can use this function to calculate the number of decimals in a number by taking the difference between the logarithm of the original number and the logarithm of the integer part of the number. For example:</p> <pre><code>\nconst num = 123.456;\nconst intPart = Math.trunc(num);\nconst decimals = Math.log10(num) - Math.log10(intPart);\n\nconsole.log(decimals); // 3\n</code></pre> <p>However, this approach will not accurately account for trailing zeros, as they will still be counted as part of the decimal component. To address this, we can use a regular expression to remove the trailing zeros and then calculate the number of decimals using the same method as above.</p> <pre><code>\nconst num = 123.45600;\nconst numWithoutTrailingZeros = num.toString().replace(/0+$/, '');\nconst intPart = Math.trunc(numWithoutTrailingZeros);\nconst decimals = Math.log10(numWithoutTrailingZeros) - Math.log10(intPart);\n\nconsole.log(decimals); // 2\n</code></pre> <p>Another approach is to use the built-in Number.toFixed() function, which returns a string representation of a number with a specified number of decimal places. We can use this function to calculate the number of decimals in a number by passing in a value for the number of decimal places that is greater than the number of actual decimals in the number. For example:</p> <pre><code>\nconst num = 123.456;\nconst numWithExtraDecimals = num.toFixed(10);\nconst decimals = numWithExtraDecimals.length - numWithExtraDecimals.indexOf('.') - 1;\n\nconsole.log(decimals); // 3\n\n</code></pre> <p>This approach will also accurately account for trailing zeros, as they will be automatically removed by the toFixed() function.</p> <p>In conclusion, there are several ways to find the number of decimals in a number minus the trailing zeros in Typescript without converting to a string. Whether you use the logarithm approach, the regular expression approach, or the toFixed() approach, you can easily and efficiently calculate the number of decimals in a number in your Typescript code.</p> <p>Photo by Sathesh D: https://www.pexels.com/photo/closeup-photo-of-black-computer-keyboard-s-left-side-keys-698808/</p>"},{"location":"blogs/Jellyfin%20on%20a%20Raspberry%20Pi%204%20-%20The%20Complete%20Setup/","title":"Jellyfin on a Raspberry Pi 4 - The Complete Setup","text":"Jellyfin on a Raspberry Pi 4 - The Complete Setup <p> If you're like me, you have tons of music stored in Google Play Music.\u00a0 So the September 2020 shutdown of Google Play Music was a real bummer to me.\u00a0 Google allowed me to move my music to YouTube Music, but let's be real, YouTube Music is subpar at best.\u00a0 I carry an Android smartphone, and on Android the YouTube Music app stops playing when you lock the screen unless you are paying customer.\u00a0 So there's no going for a run with music, there's no walking the dogs with music, there's no driving with music, etc.\u00a0 You get the picture.</p> <p>So I set out on a quest to find a replacement.\u00a0 A lot of my friends really like Plex but I've tried Plex before and I didn't love it.\u00a0 I spend a couple of weekends setting up Nextcloud but the music player was just not good, no, it is bad.\u00a0 I had almost given up, then as I was listening to the Linux Unplugged podcast one afternoon in Dec they mentioned Jellyfin.\u00a0 I thought to myself, could this be it?\u00a0 Could this work?\u00a0\u00a0</p> <p>I'm happy to report that this is the BEST I've seen so far and as of now I have it fully working.\u00a0 I have Jellyfin running on my Raspberry Pi 4, with approximately 78 GB of music.\u00a0 It is exposed via fully qualified domain so that I can listen from my phone or computer anywhere in the world with an internet connection.\u00a0 It works on my browser, has and Android app and iOS app.\u00a0 I have set up accounts for myself, my wife and my kids, so everyone can create their own playlists.</p> <p>Without further ado, let's hop in and go through the setup!</p>"},{"location":"blogs/Jellyfin%20on%20a%20Raspberry%20Pi%204%20-%20The%20Complete%20Setup/#raspberry-pi-setup","title":"Raspberry Pi Setup","text":"<p>I'm running Ubuntu 20.04 on my Raspberry Pi but I'm sure that Raspbian will work as well.\u00a0 You will need to have root access, docker installed and have SSH enbabled on your Pi, so if you don't have that done stop here and get that enabled.\u00a0 Also, I would highly reccomend you setup a static IP address on your Pi and have your music loaded on your Raspberry Pi as well.\u00a0 I have my music stored right on the SD card that contains my OS in my home directory, you may store yours on an external drive, either way you will need the file path to the music directory.</p>"},{"location":"blogs/Jellyfin%20on%20a%20Raspberry%20Pi%204%20-%20The%20Complete%20Setup/#install-jellyfin","title":"Install Jellyfin","text":"<p>To install Jellyfin you'll need to run the following commands, remember you're doing this via SSH on your Raspberry Pi.</p> <pre><code>\nsudo apt install apt-transport-https\n\nwget -O - https://repo.jellyfin.org/jellyfin_team.gpg.key | sudo apt-key add -\necho \"deb [arch=$( dpkg --print-architecture )] https://repo.jellyfin.org/$( awk -F'=' '/^ID=/{ print $NF }' /etc/os-release ) $( awk -F'=' '/^VERSION_CODENAME=/{ print $NF }' /etc/os-release ) main\" | sudo tee /etc/apt/sources.list.d/jellyfin.list\n\nsudo apt update\n\nsudo apt install jellyfin\n</code></pre> <p>Now open a new tabl on your browser and navigate to the following URL:</p> <pre><code>\nhttp://&lt;raspberry_pi_ip_address&gt;:8096\n</code></pre> <p>You will be greeeted with Jellyfin page!\u00a0 Here you'll need to go through the setup process, the first still will be to choose the language and then click Next.</p> <p></p> <p>Create a Username and Password, then click Next.</p> <p></p> <p>I won't go through every step, but will go through a few that are important.\u00a0 Click Add Media Library and then you'll need to enter the path to your music (remember we mentioned you would need this path).</p> <p></p> <p>Enter the path to your music, then tab and scroll down.</p> <p></p> <p>When I first setup JellyFin I only selected MusicBrainz but didn't get all of my album art, song titles, etc.\u00a0 I went back later on and selected both MusicBrainz and TheAudioDB and then had to wait for all of my musc to be scanned again.\u00a0 I'll save you from that pain, go ahead and select both options here in both of the areas below.\u00a0 Scroll on down and choose Nfo and save artwork in your media folders.\u00a0 After that click OK.</p> <p></p> <p>Your music library is setup and we are almost done.\u00a0 Click Next.</p> <p></p> <p>On the Configure Remote Access page, leave Allow remote connections to the Jellyfin Server selected but do not check Enable automatice port mapping.\u00a0 Then click Next.</p> <p></p> <p>You did it!\u00a0 Click finish to complete the setup.\u00a0</p> <p></p> <p>After that you'll be asked to login with your Username and Password.\u00a0 It will take a while to download all of the music metadata and artwork.\u00a0 Till then you'll see a lot of blue boxes but Jellyfin is fully functional and setup.\u00a0 At least it is inside your network.</p> <p>We could stop here and call it done.\u00a0 But the moment you walk out of WiFi range then no more music for you.\u00a0 What you really want is to expose your Jellyfin setup to the outside world, securely.\u00a0 So let's get started on that part.\u00a0 I promise it's not that hard and it won't even hurt.</p>"},{"location":"blogs/Jellyfin%20on%20a%20Raspberry%20Pi%204%20-%20The%20Complete%20Setup/#router-setup","title":"Router Setup","text":"<p>This will vary wildly depending on the router that you have, but in short you want to forward\u00a0ports 80 and 443 and to your Raspberry Pi.</p> <p>My router is by Netgear, so to accomplish this I log in to the router, go to Advanced &gt; Advanced Setup &gt; Port Forwarding/Port Triggering.\u00a0 Select HTTP from the Service Name dropdown, fill in the Raspberry Pi IP address and click Add, this opens up port 80 to my Raspberry Pi.\u00a0 Next click\u00a0Add Custom Service and then fill out the form for port 443 and my Raspberry Pi IP address.\u00a0 After this is done make sure the page is saved on your router to preserve the open ports.</p> <p></p> <p>As I mentioned this will very greatly depending on the router that you have but the process should be somewhat similar.\u00a0 You can Google how to forward ports on your specific router and get this step done.</p>"},{"location":"blogs/Jellyfin%20on%20a%20Raspberry%20Pi%204%20-%20The%20Complete%20Setup/#cloudflare-dns-setup","title":"Cloudflare DNS Setup","text":"<p>At this point we will setup Cloudflare to route traffic to your IP address.\u00a0 You will need a custom domain for this part.\u00a0 If you don't have one already you can purchase a custome domain from many different sources.\u00a0 I've used several domain registars in the past but currently I prefer Google Domains,\u00a0https://domains.google.com/. Pick one that works for you and get it setup.\u00a0 You will need access to the domain during this step.</p> <p>After you have your domain registered then we'll setup Cloudflare's DNS service.\u00a0 You will need to create an account on Cloudflare, the free version works just fine for what we need to do.\u00a0 So navigate to Cloudflare and create an account.</p> <p></p> <p>Next you'll need to enter your domain name, such as example.com (you'll not enter in http://, just the domain name).</p> <p></p> <p>After you have entered your domain you will be taken to a page to select your account type, just scroll down and choose the free plan and click Continue</p> <p></p> <p>After you have selected your plan you'll be asked to verify your DNS records, skip this page for now and click Continue.\u00a0 Then you'll be presented with the Change your nameservers screen.\u00a0 This is a very important step.\u00a0 You'll need to remove your current nameservers and replace them with Cloudflare's nameservers.\u00a0 Here's what mine looked like -\u00a0</p> <p></p> <p>Just replace your current nameservers with the new nameservers in step 4 and save them on our registar page.\u00a0 This will vary depending on which service you use, but it should be pretty easy to do.\u00a0 You may have 2 or 3 nameservers in your current service, and you'll be replacing them with the two that Cloudflare provides.\u00a0 Notice the warning that is in step 5, it could take 24 hours but in reality mine were ready right away.\u00a0 You're milage may vary on this step, so you may have a wait a little bit.\u00a0 Click Done, check nameserves and see if Cloudflare can validate, once validated you'll be taken to an overview page.</p> <p>Select the SSL/TLS tab and make sure Full is selected.</p> <p></p> <p>Now you'll need to change the DNS settings to point to your router.\u00a0 For this step you need the IP address for your home router.\u00a0 An easy way to get this is to go to Google and type in \"what is my ip address\".\u00a0 A word of warning, your IP address could change unless you have a static IP address from your service provider, so you may have to update this in the future.\u00a0 I use DynDNS but I have not figured out how to link that service to Cloudflare (yet).\u00a0 You'll need to setup a CNAME record for jellyfin (this is your subdomain that will be pointed to your Raspberry PI, so it can be anything you want but since we're setting up Jellyfin, I went with jellyfin)\u00a0and your domain name and an A record for your domain name and home IP address.\u00a0</p> <p>Lastly, you must change the Proxy status for both of these records to DNS only, they will be defaulted to Proxied.\u00a0 Just click on Proxied and you will be able to change to DNS only.</p> <p></p> <p>OK, give yourself a pat on the back.\u00a0 You're done with that step, to me that was the hardest step as I hadn't used Cloudflare before.</p>"},{"location":"blogs/Jellyfin%20on%20a%20Raspberry%20Pi%204%20-%20The%20Complete%20Setup/#nginx-proxy-manager-setup","title":"Nginx Proxy Manager Setup","text":"<p>Here's the final step to setting up Jellyfin and being able to use it remotely.\u00a0 We'll setup Nginx Proxy Manager, which allows us to expose web services on our network and even will provide an SSL certificate from Let's Encrypt.</p> <p>For this step we'll SSH into the Raspberry Pi and then from the SSH connection you'll need to install some dependencies for Ngninx Proxy Manager with the following commands:</p> <pre><code>\nsudo apt-get install -y libffi-dev libssl-dev\nsudo apt-get install -y python3 python3-pip\nsudo pip3 -v install docker-compose\n\n\n</code></pre> <p>After the dependenices are installed then we'll create a directory for nginx and a config file.\u00a0 Here are the commands:</p> <pre><code>\nmkdir nginx\ncd nginx\nnano config.json\n</code></pre> <p>Next paste the following into the config.json file and save the file -</p> <pre><code>\n{\n  \"database\": {\n    \"engine\": \"mysql\",\n    \"host\": \"db\",\n    \"name\": \"npm\",\n    \"user\": \"npm\",\n    \"password\": \"npm\",\n    \"port\": 3306\n  }\n}\n</code></pre> <p>Next we'll create a docker-compose file -</p> <pre><code>\nnano docker-compose.yml\n</code></pre> <p>and we'll enter the following into the docker-compose file and save -</p> <pre><code>\nversion: '3'\nservices:\n  app:\n    image: 'jc21/nginx-proxy-manager:latest'\n    ports:\n      - '80:80'\n      - '81:81'\n      - '443:443'\n    volumes:\n      - ./config.json:/app/config/production.json\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n  db:\n    image: 'yobasystems/alpine-mariadb:latest'\n    environment:\n      MYSQL_ROOT_PASSWORD: 'npm'\n      MYSQL_DATABASE: 'npm'\n      MYSQL_USER: 'npm'\n      MYSQL_PASSWORD: 'npm'\n    volumes:\n      - ./data/mysql:/var/lib/mysql\n</code></pre> <p>So the docker-compose.yml file will use docker to create a container called app and will pull the lastest version of Nginx Proxy Manager, it will open up ports 80, 81, and 443. It will link several volumn files such as\u00a0the config.json file will be linked to the production.json file.\u00a0 Also it will create a container called db that will be running MariaDB with will store the Nginx Proxy Manager's data.</p> <p>Now we'll actually build those container and run them by issuing the following command -\u00a0</p> <pre><code>\nsudo docker-compose up -d\n</code></pre> <p>You'll see the containers being downloaded and built, once this process is finished we'll issue two more command so both the app container and the db container will be started automatically whenever your Raspberry Pi reboots -</p> <pre><code>\nsudo docker update --restart always nginx_app_1\nsudo docker update --restart always nginx_db_1\n</code></pre> <p>Once those are done you MUST reboot the Raspberry Pi (don't skip this step)</p> <pre><code>\nsudo reboot now\n</code></pre> <p>Wait for a minute or so for your Raspberry Pi to reboot and then SSH back in and validate that the containers are running -</p> <pre><code>\ndocker ps\n</code></pre> <p></p> <p>Once the containers have a status of Up, then you are ready to move on to the next step.\u00a0 It may take a minute for them to reach this status, if so just keep running the docker ps command and get the most up to date status.</p> <p>Now you'll want to open a browser tab and navigate to the following:</p> <pre><code>\nhttp://&lt;raspberry_pi_ip_address&gt;:81\n</code></pre> <p>You'll be presented with the login screen for Nginx Proxy Manager.\u00a0 The default email address is admin@example.com\u00a0and the password is changeme.\u00a0 Login with those credentials and then you can change them to your actual email and create a password.</p> <p></p> <p>After you have your account squared away, you'll need to setup the Proxy.\u00a0 Click on Hosts &gt; Proxy Hosts &gt; Add Proxy Host.</p> <p></p> <p>Here you will enter your subdomain and domain like the example below.\u00a0 You'll need your Raspberry Pi IP address and you'll put that in the Forward Hostname/IP, enter 8096 in the Forward Port (this is the default port for Jellyfin), click Block Common Exploits.\u00a0 Before you save click the SSL tab.</p> <p></p> <p>Under SSL Certificate select Request a new SSL Certificate, then select HTTP/2 Support, and I Agree to the Let's Encrypt TOS and finally Save.\u00a0 You will be issued an SSL Certfificate and the Proxy will be setup.</p> <p></p> <p>Guess what?\u00a0 You're done! Open a new tab and navigate to your URL https:// to confirm that you can reach Jellyfin in the browser.\u00a0 You'll need to log in with your account credentials that you created way back at the beginning of this post.\u00a0 Oh and by this point, your music has probably already finished being scanned and you should have album art and metadata (that's why we did that early on).\u00a0 It's time to rock out!\u00a0\u00a0 <p>So your setup in the browser but you probably want to listen on your phone as well, so download the app from your app store.\u00a0 When you open up the Jellyfin app it will ask you for your server and you'll use that same URL that you naviagated to in your browser -\u00a0https://. <p>That's it, we're done!\u00a0 I hope you enjoyed this post and I hope it helped you get setup.</p>"},{"location":"blogs/Python%203.9%20Dict%20Merge%20and%20Update/","title":"Python 3.9 Dict Merge and Update","text":"Python 3.9 Dict Merge and Update <p> Python 3.9 Dict Merge and Update Operations ===========================================</p> <p>Python 3.9 was released on Oct 5, 2020 (2020-10-05 for programming purposes), and with it there are several new features.\u00a0 This post will be one of several short posts showing off those changes.</p>"},{"location":"blogs/Python%203.9%20Dict%20Merge%20and%20Update/#dict-merge","title":"Dict Merge","text":"<p>Merging two dicts is something you may need to do when you have data coming from multiple sources and would like to only have a single dict to use in your application.\u00a0 It has become very easy in Python 3.9.\u00a0 Let's take a look at that now.</p> <p>To merge two dicts we'll simple use the pipe (|) operator:</p> <pre><code>\n\nx = {\"word1\": \"Hello\", \"word2\": \"World\", \"word3\": \"!\"}\ny = {\"word2\": \"from\", \"word3\": \"Python3.9\"}\n\n&gt;&gt;&gt; x\n{'word1': 'Hello', 'word2': 'World', 'word3': '!'}\n&gt;&gt;&gt; y\n{'word2': 'from', 'word3': 'Python3.9'}\n&gt;&gt;&gt; x | y\n{'word1': 'Hello', 'word2': 'from', 'word3': 'Python3.9'}\n</code></pre> <p>As you can see the word2 and word3 elements are updated with the values from the y dict to create a single new dict with the merged keys.</p>"},{"location":"blogs/Python%203.9%20Dict%20Merge%20and%20Update/#dict-update","title":"Dict Update","text":"<p>Updating a dict with the values from another dict is also made easier in Python 3.9.\u00a0 To update a dict you'll use the update command (|=) and the original dict will be updated with the values from the second dict.\u00a0 Let's take a look:</p> <pre><code>\n&gt;&gt;&gt;&gt; x = {\"word1\": \"Hello\", \"word2\": \"World\", \"word3\": \"!\"}\n&gt;&gt;&gt; y = {\"word2\": \"from\", \"word3\": \"Python3.9\"}\n&gt;&gt;&gt; x\n{'word1': 'Hello', 'word2': 'World', 'word3': '!'}\n&gt;&gt;&gt; y\n{'word2': 'from', 'word3': 'Python3.9'}\n&gt;&gt;&gt; x | y\n{'word1': 'Hello', 'word2': 'from', 'word3': 'Python3.9'}\n\n&gt;&gt;&gt; x |= y\n&gt;&gt;&gt; x\n{'word1': 'Hello', 'word2': 'from', 'word3': 'Python3.9'}\n</code></pre> <p>With these small changes Python has become easier to use and understand.\u00a0 I hope this helps you out and if you have any feedback please let me know by leaving a comment.\u00a0</p>"},{"location":"blogs/Python%20Environment%20Variables%20the%20Right%20Way%20-%20Decouple/","title":"Python Environment Variables the Right Way - Decouple","text":"Python Environment Variables the Right Way - Decouple"},{"location":"blogs/React%20-%20Communicate%20between%20Parent%20and%20Child%20Functional%20Components/","title":"React - Communicate between Parent and Child Functional Components","text":"React - Communicate between Parent and Child Functional Components"},{"location":"blogs/React%20-%20Communicate%20between%20Parent%20and%20Child%20Functional%20Components/#functional-component","title":"Functional Component","text":"<p>Before we get started with how to communicate between Functional components, let's define what a Funcitonal component is and isn't.\u00a0</p> <p>One other thing to note, I'm using TypeScript.\u00a0 If you aren't useing TypeScript you should really consider it as it will greatly reduce the number of errors you may inadvertantly inject into your codebase.</p> <p>A Functional component is simply a function that returns a React fragment.\u00a0 Here's the simplest example:</p> <pre><code>\nimport React from 'react';\n\nconst Simple: React.FC&lt;React.FunctionComponent&gt; = () =&gt; {\n  return(\n    &lt;&gt;\n      &lt;h1&gt;Simple Functional Component&lt;/h1&gt;\n    &lt;/&gt;\n  )\n};\n\nexport default Simple;\n</code></pre> <p>This Functional component named Simple, takes no props and returns a React element containing an h1 with an innerText value of \"Simple Functional Component\".\u00a0 The &lt;&gt; and  tags are shorthand for React Fragment, this could have also returned the following:</p> <pre><code>\n&lt;React.Fragment&gt;\n  &lt;h1&gt;Simple Functional Component&lt;/h1&gt;\n&lt;/React.Fragment&gt;\n</code></pre> <p>A React Functional component does not have to explicitly return an React.Fragment, but it must return a single element that contains zero or more sub-elements.</p> <p>Typically you will have Functional components that contain other React components, when that is the case then the component that contains other components is considered the parent and the components that are included are considered to be child components.</p>"},{"location":"blogs/React%20-%20Communicate%20between%20Parent%20and%20Child%20Functional%20Components/#communiction-between-functional-components","title":"Communiction Between Functional Components","text":"<p>Functional components communicate by setting props to variables or functions.\u00a0 These functional props are then executed on the receiving functional component.\u00a0 And the good news is, this can go from a Parent to a Child or from a Child to a Parent.\u00a0 Let's start off with a very simple example and then we'll move to a more complicated setup.</p>"},{"location":"blogs/React%20-%20Communicate%20between%20Parent%20and%20Child%20Functional%20Components/#parent-to-child-communication","title":"Parent to Child Communication","text":"<p>In this example we'll simplly send the title value from the parent to the child.</p> <pre><code>\nexport default function Parent() {\n  const [child2Title, setChild2] = useState('Child2')\n\n  return (\n    &lt;div className=\"parent_container\"&gt;\n      &lt;h1&gt;Parent Component&lt;/h1&gt;\n      &lt;div className=\"child_container\"&gt;\n        &lt;Child2 \n          title={child2Title}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n-----------------------\ninterface Child2Props {\n  title: string;\n}\n\nconst  Child2: React.FC&lt;Child2Props&gt; = (props) =&gt; {\n  return(\n    &lt;div className=\"child2\"&gt;\n      &lt;h2&gt;{props.title}&lt;/h2&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>As you can see, we create a variable named child2Title when the Parent component is initialized.\u00a0 The Parent component sends the child2Title variable to the Child2 component set as the title prop.\u00a0 Then we create an interface named Child2Props with a string named title.\u00a0 The Child2 component is created using the Child2Props interface and the title in the h2 element is set to props.title.\u00a0</p> <p>The parent sent the child a variable that was then used to set a value in the Child2 component.\u00a0 Both components are functional components.\u00a0 No constructors were needed, the code is very simple and clean.\u00a0 Easy.</p>"},{"location":"blogs/React%20-%20Communicate%20between%20Parent%20and%20Child%20Functional%20Components/#bidirectional-communication","title":"Bidirectional Communication","text":"<p>Now we'll move into a more complicated scenario.\u00a0 What if we wanted to have the h1 value updateable in the Parent and Child2 components?\u00a0 And we want to do it from Child1.\u00a0 Is that even possible?\u00a0 Is it possible to update a value from a child to a parent?\u00a0 Is it possible to update a value from a child and send it through the parent to another child?\u00a0 It is!</p> <p></p> <p>Let's dive into the code and see if we can do this and then I'll explain once we're done.</p> <pre><code>\n-------------------\nChild2\n-------------------\nimport React from \"react\";\n\ninterface Child2Props {\n  title: string;\n}\n\nconst  Child2: React.FC&lt;Child2Props&gt; = (props) =&gt; {\n  return(\n    &lt;div className=\"child2\"&gt;\n      &lt;h2&gt;{props.title}&lt;/h2&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default Child2;\n\n</code></pre> <p>First off let's look at Child2, there are no changes needed.\u00a0 So above you see Child2 in it's entirety.</p> <p>Next we'll dive into the Parent, a few changes will be needed.</p> <pre><code>\nimport React from \"react\";\nimport { useState } from \"react\";\nimport Child1 from './Child1';\nimport Child2 from \"./Child2\";\n\nexport default function Parent() {\n  const [title, setTitle] = useState('Parent!')\n  const [child2Title, setChild2] = useState('Child2')\n\n  function updateTitle(newTitle: string){\n    setTitle(newTitle)\n  }\n  function setChild2Title(child2Title: string) {\n    setChild2(child2Title)\n  }\n  return (\n    &lt;div className=\"parent_container\"&gt;\n      &lt;h1&gt;{title}&lt;/h1&gt;\n      &lt;div className=\"child_container\"&gt;\n        &lt;Child2 \n          title={child2Title}\n        /&gt;\n        &lt;Child1 \n          updateChild2Title={setChild2Title}\n          updateParentTitle={updateTitle}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>On the Parent we are now using a useState hook for title and setTitle.\u00a0 We are using the title variable in our h1 for the main title of the Parent.\u00a0 We have created a two functions - updateTitle to handle calling setTitle with the new value that will be received from Child1 and setChild2Title to update the value received from Child1 to the new child2Title by calling setChild2.</p> <p>We also added in the Child1 element in our React Fragment, Child1 has two props, updateChild2Title which is set to equal the function setChild2Title and updateParentTitle which is set to equal the function updateTitle.\u00a0 This is interesting and a bit more complicated but still much simpler than a class based component.</p> <p>Now let's build out that Child1 component and see if we can actually update values on the Parent and Chid2.</p> <pre><code>\n\ninterface child1props {\n  updateParentTitle(title: string): any;\n  updateChild2Title(title: string): any;\n}\n\n\n</code></pre> <p>We'll start with just the interface.\u00a0 The interface has two values - updateParentTitle and updateChild2Title, these are the same values that are sent as props from the Parent component.\u00a0 They are also both functions that take a string named title and return any.</p> <pre><code>\nconst [titleVal, setTitleVal] = useState('')\nconst [childTitleVal, setChildTitle] = useState('')\n</code></pre> <p>Child1 will also use useState hooks to control the values for the parent title and child2 title, both values are set to emply strings when the component is initialized as these values will be connected to input elements.</p> <pre><code>\n&lt;div className=\"grid\"&gt;\n   &lt;label htmlFor=\"parent_title\"&gt;Parent Title Input&lt;/label&gt;\n   &lt;input type=\"text\" name=\"titles\" id=\"parent_title\" placeholder=\"Parent Title\" onChange={handleInput}/&gt;\n   &lt;button onClick={setParent}&gt;Update parent title&lt;/button&gt;\n&lt;/div&gt;\n\nfunction setParent(){\n    if (titleVal.length &gt; 1) {\n      props.updateParentTitle(titleVal)\n    } \n  }\n\nconst handleInput = (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    setTitleVal(event.target.value)\n  }\n</code></pre> <p>This is a bit out of order but I want to show you the bits and pieces before the entire component is shown to make it easier to understand.\u00a0</p> <p>We setup the input and button to update the Parent title.\u00a0 The input has an onChange function that is connected to the handleInput function.\u00a0 The handleInput function takes the value from the input and calls the setTtitleVal function to update the titleVal.\u00a0 At this point the state has changed inside the Child1 component but has not been sent to the parent.\u00a0 To send to the parent there is an onClick on the button that calls the setParent function.\u00a0 The setParent function then calls props.updateParentTitle and sends the titleVal up to the parent.\u00a0 Remember, the updateParentTitle function was set as a prop on the Child1 component from the Parent component it then calls the updateTitle function on the Parent component which calls the setTitle useState hook.\u00a0 So at this point we can send a value from the Child1 component to the Parent component.\u00a0 But we still need to send from Child1 to Parent to Child2, so let's knock that functionality out.</p> <pre><code>\n&lt;div className=\"grid\"&gt;\n     &lt;label htmlFor=\"child2_title\"&gt;Child2 Title Input&lt;/label&gt;\n     &lt;input type=\"text\" name=\"titles\" id=\"child2_title\" placeholder=\"Child2 Title\" onChange={handleChild2Input}/&gt;\n    &lt;button onClick={setChild2}&gt;Update Child2 title&lt;/button&gt;\n&lt;/div&gt;\n\nfunction setChild2(){\n    if (childTitleVal.length &gt; 1){\n      props.updateChild2Title(childTitleVal)\n    }\n  }\n\nconst handleChild2Input = (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    setChildTitle(event.target.value)\n  }\n</code></pre> <p>The good news is you already know how to do this.\u00a0 We are using the same pattern for sending the updated title for Child2.\u00a0 We create an input and button.\u00a0 The input has an onChange listener that passes the value of the intput to the setChildTittle function.\u00a0 Then the button has an onClick function that calls the setChild2 function which calls props.updateChild2Title.\u00a0 updateChild2Title was set as a prop on Child1 from the Parent component, which then calls the function setChild2Title.\u00a0 setChild2Title calls the useState hook setChild2 which updates the child2Title value and pushes that state value down to Child2.</p> <p>Below is Child1 in it's entirety.\u00a0 Take a few minutes to read through it as it's more complicated looking than the other components but once you understand how the small bits and pieces work then it's very digestible.</p> <pre><code>\nimport React, { useState } from \"react\";\n\ninterface child1props {\n  updateParentTitle(title: string): any;\n  updateChild2Title(title: string): any;\n}\n\nconst Child1: React.FC&lt;child1props&gt; = (props) =&gt; {\n  const [titleVal, setTitleVal] = useState('')\n  const [childTitleVal, setChildTitle] = useState('')\n\n  function setParent(){\n    if (titleVal.length &gt; 1) {\n      props.updateParentTitle(titleVal)\n    } \n  }\n\n  function setChild2(){\n    if (childTitleVal.length &gt; 1){\n      props.updateChild2Title(childTitleVal)\n    }\n  }\n\n  const handleInput = (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    setTitleVal(event.target.value)\n  }\n\n  const handleChild2Input = (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n    setChildTitle(event.target.value)\n  }\n\n\n  return(\n    &lt;div&gt;\n      &lt;h2&gt;I'm Child1.&lt;/h2&gt;\n      &lt;div className=\"child1_container\"&gt;\n        &lt;div className=\"grid\"&gt;\n          &lt;label htmlFor=\"parent_title\"&gt;Parent Title Input&lt;/label&gt;\n          &lt;input type=\"text\" name=\"titles\" id=\"parent_title\" placeholder=\"Parent Title\" onChange={handleInput}/&gt;\n          &lt;button onClick={setParent}&gt;Update parent title&lt;/button&gt;\n        &lt;/div&gt;\n\n        &lt;div className=\"grid\"&gt;\n          &lt;label htmlFor=\"child2_title\"&gt;Child2 Title Input&lt;/label&gt;\n          &lt;input type=\"text\" name=\"titles\" id=\"child2_title\" placeholder=\"Child2 Title\" onChange={handleChild2Input}/&gt;\n          &lt;button onClick={setChild2}&gt;Update Child2 title&lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default Child1;\n</code></pre>"},{"location":"blogs/React%20-%20Communicate%20between%20Parent%20and%20Child%20Functional%20Components/#summary","title":"Summary","text":"<p>Building React functional components that communicate from parent to child, child to parent, or child to child is relatively simple.\u00a0 The key to communication is done through sending functions as props.\u00a0 I hope this article was helpful, if so please share!</p> <p>Here is the repo for the code:</p> <p>https://github.com/marty331/react_parent_child</p>"},{"location":"blogs/Streamlit%20Class%20Based%20App/","title":"Streamlit Class Based App","text":"Streamlit Class Based App <p> Streamlit Class Based App =========================</p> <p>Streamlit is an app that allows a Python devloper to turn their Python code into a shareable web app.\u00a0 It works great and it's very easy to get started.\u00a0 May data scientist use Jupyter notebooks and Steamlist is similar in a way but creates an actual web application that can be published.</p>"},{"location":"blogs/Streamlit%20Class%20Based%20App/#streamlit-nuances","title":"Streamlit Nuances","text":"<p>One of the first issues I found with Streamlit was anytime a user has any interaction with a widget (button, slider, textbox, etc), then the entire application is ran again.\u00a0 I hope that the foks at Streamlit come up with a solution to this or maybe an option to turn this off so every widget is not recreated, but I digress.</p> <p>Another issue is state management.\u00a0 Streamlit has tackled state managment as you'll see later on, but their documentation could be improved with better examples.\u00a0\u00a0 The examples they have are really well written but there are just not many of them and they are basic.</p>"},{"location":"blogs/Streamlit%20Class%20Based%20App/#streamlit-apps-without-state","title":"Streamlit Apps Without State","text":"<p>As I mentioned previously, the code in your streamlit app is ran on every touch of a widget.\u00a0 So that means if you change a value but don't have state stored then you have lost your value and the inital value is reset.\u00a0 Let's take a look at Streamlit's example of an app that does not retain state.\u00a0 Here we will simply click a button titled 'Increment' that should +1 to the current value of count....only it never makes it past 1.</p> <pre><code>\nimport streamlit as st\n\nst.title('Counter Example')\ncount = 0\n\nincrement = st.button('Increment')\nif increment:\n    count += 1\n\nst.write('Count = ', count)\n\n</code></pre> <p></p>"},{"location":"blogs/Streamlit%20Class%20Based%20App/#streamlit-apps-with-state","title":"Streamlit Apps With State","text":"<p>The team at streamlit recognized this shortcoming and came up with a solution to the state problem.\u00a0 There were other solutions before it that were developed by developers outside of the project also.\u00a0 Streamlit's solution is to offer up session_state and it works really well.\u00a0 I'm currently using it in production apps.\u00a0</p> <p>Here is the way Streamlit explains how to initialize state in an app:</p> <pre><code>\n# Check if 'key' already exists in session_state\n# If not, then initialize it\nif 'my_key' not in st.session_state:\n    st.session_state['my_key'] = 'value'\n\n# Session State also supports the attribute based syntax\nif 'my_key' not in st.session_state:\n    st.session_state.my_key = 'value'\n</code></pre> <p>So session_state works similarly to JSON but not exatly like JSON.\u00a0 First you search to see if a key is present in the session_state and if not then create the initial value.\u00a0 Looking back on my attempt to figure out how to implement class based Streamlit apps I wish I had clung to that nugget as it proved to be essential.\u00a0</p> <p>To access a value in session_state you will simply call it as below:</p> <pre><code>\nst.session_state.my_key\n</code></pre> <p>However if you attempt to access a key that has not been initialized you will get the following type of exception:</p> <p></p> <p>The moral of the story is, always initialze any varialbe you want to keep in session_state.\u00a0 We'll get to that really soon.</p> <p>So let's see the the same type of app as before but one that retains state.\u00a0 We will implement an Increment and see how state is retained:</p> <pre><code>\nimport streamlit as st\n\nst.title('Counter Example')\nif 'count' not in st.session_state:\n    st.session_state.count = 0\n\nincrement = st.button('Increment')\nif increment:\n    st.session_state.count += 1\n\nst.write('Count = ', st.session_state.count)\n\n</code></pre> <p>And then we can see this works:</p> <p></p>"},{"location":"blogs/Streamlit%20Class%20Based%20App/#class-based-streamlit-app-broken-state","title":"Class Based Streamlit App - Broken State","text":"<p>So now we understand how to handle state in Streamlit but the code we've written so far is not class based and not object oriented.\u00a0 It is functional but it's not up to professional standards and not extensible.\u00a0 The reason I was even concerned with this is I have a client who needed a Streamlit app upgraded and it needed to retain state for multiple files and calculated values.\u00a0 It was written by a data scientist and the work was brilliant, but it just wasn't extensible.\u00a0 So I was tasked with correcting that, and I did.\u00a0</p> <p>Let's rewrite the app as a class based app and we will add in a Decrement button to go along with our Increment button.\u00a0 I will show you how I thought this should have been written in this iteration and you'll see that the state is now broken.\u00a0 Bummer.</p> <pre><code>\nimport streamlit as st\n\n\nclass Counter:\n    def __init__(self):\n        st.session_state.count = 0\n        st.session_state.title = \"Calculator\"\n\n    def add(self):\n        st.session_state.count += 1\n\n    def subtract(self):\n        st.session_state.count -= 1\n\n    def window(self):\n        st.button(\"Increment\", on_click=self.add)\n        st.button(\"Decrement\", on_click=self.subtract)\n        st.write(f'Count = {st.session_state.count}')\n\n\n\nif __name__ == '__main__':\n    ct = Counter()\n    ct.window()\n\n</code></pre> <p>Let's focus on the __init__ method.\u00a0 At first glance you may think nothing of this, it looks like any other __init__ method you've seen however the problem is that Streamlit has the nuances that I mentioned previously - it reruns every time you touch a widget and session_status is going to be reset because of this nuance.\u00a0</p> <p>Let's take a look at what happens in real life.\u00a0 As you see, state is not being retained at all, no matter how many times we click Increment or Drecrement the value of count is always zero.\u00a0 I don't know about the apps you've worked on, but to me this is less than ideal.\u00a0 So let's fix it once and for all.</p> <p></p>"},{"location":"blogs/Streamlit%20Class%20Based%20App/#class-based-streamlit-app-working-state","title":"Class Based Streamlit App - Working State","text":"<p>I really felt like kicking myself once I figured out my error, it was simple and the Streamlit docs literally told me what I needed to do.\u00a0 In ithe __init__ method you need to look to see if your key is in session_state.\u00a0 If it's not, then you add it with a default value.\u00a0 If it is, then you do nothing.\u00a0 Simple.\u00a0</p> <p>Here's the code:</p> <pre><code>\nimport streamlit as st\n\n\nclass Counter:\n    def __init__(self):\n        if 'count' not in st.session_state:\n            st.session_state.count = 0\n        if 'title' not in st.session_state:\n            st.session_state.title = \"Calculator\"\n        self.col1, self.col2 = st.columns(2)\n\n    def add(self):\n        st.session_state.count += 1\n\n    def subtract(self):\n        st.session_state.count -= 1\n\n    def tester(self):\n        if 'tester' not in st.session_state:\n            st.session_state.tester = \"Tester\"\n        else:\n            st.session_state.tester = \"Already tested\"\n        with self.col2:\n            st.write(f\"Hello from the {st.session_state.tester}!\")\n\n    def window(self):\n\n        with self.col1:\n            st.button(\"Increment\", on_click=self.add)\n            st.button(\"Subtract\", on_click=self.subtract)\n            st.write(f'Count = {st.session_state.count}')\n        with self.col2:\n            st.button('test me', on_click=self.tester)\n\n\n\nif __name__ == '__main__':\n    ct = Counter()\n    ct.window()\n\n</code></pre> <p>So now we look for the value in session_state, if it's there no action is taken, if it is not there then we sent an initial value.\u00a0 Streamlit handles the reloads and retains state for us.\u00a0 Also, in this iteration I've added in two columns and a new button to display a message for the user, just to prove that state is retained with different interactions.</p> <p></p> <p>And there you have it. Thanks for reading.\u00a0 Please feel free to reach out to me on Twitter: marty331</p> <p>Photo by Jack Gittoes from Pexels</p>"},{"location":"blogs/Wagtail%20-%20How%20to%20add%20a%20List%20of%20Related%20Fields%20to%20a%20Page/","title":"Wagtail - How to add a List of Related Fields to a Page","text":"Wagtail - How to add a List of Related Fields to a Page <p> The Requirement</p> <p>I recently had a client who wanted the ability to display multiple\u00a0videos about their products and have them in a scrollable carousel.\u00a0 As I've learned over the years, a client's initial request is not actually what they want.\u00a0 So I dug a bit deeper and discoverened that they actually want the ability to show multiple videos and some written content telling the user what the video is about.\u00a0 After learning this I felt I had the fully story.\u00a0 I had previously created a product page in Wagtail that allowed for a single video element and other fields that described various attributes of the product.\u00a0</p>"},{"location":"blogs/Wagtail%20-%20How%20to%20add%20a%20List%20of%20Related%20Fields%20to%20a%20Page/#the-problem","title":"The Problem","text":"<p>Now I needed to modify this page to allow for multiple videos and descriptions for each product.\u00a0 This should be simple right?\u00a0 I (incorrectly) assumed I could add a list of objects to the page.\u00a0\u00a0Just create a list of fields?\u00a0 Hmm.\u00a0 I searched the Wagtail documents and the Django documents and was unable to find the elusive ListField.\u00a0 In fact, I don't believe one exists.\u00a0 (Feel free to comment if that is incorrect)\u00a0 I truly believe that is something can be imagined then it can be built, so I knew there must be a solution out there and I had to figure it out.</p>"},{"location":"blogs/Wagtail%20-%20How%20to%20add%20a%20List%20of%20Related%20Fields%20to%20a%20Page/#the-solution","title":"The Solution","text":"<p>After spending a bit of time trying to understand how this was going to be possible I came across StreamFields.\u00a0 Everything I was reading was pointing me back to StreamFields as the solution but I was having a really hard time finding any real information about how to implement StreamFields with a RichTextField and a URLField (or any set of multiple fields).\u00a0 Finally I came across the StructBlock.</p> <pre><code>\nStructural block types\nIn addition to the basic block types above, it is possible to define new \nblock types made up of sub-blocks: for example, a \u2018person\u2019 block consisting \nof sub-blocks for first name, surname and image, or a \u2018carousel\u2019 block \nconsisting of an unlimited number of image blocks. These structures can \nbe nested to any depth, making it possible to have a structure containing \na list, or a list of structures.\n</code></pre> <p>https://docs.wagtail.io/en/stable/topics/streamfield.html?highlight=StructBlock#structural-block-types</p> <p>The example (PersonBlock)\u00a0that is provided made this clear that I had found my way.\u00a0 This shows a class that contains multiple related fields, which is eactly what I was looking for to solve my client's problem.</p> <pre><code>\nclass PersonBlock(blocks.StructBlock):\n    first_name = blocks.CharBlock()\n    surname = blocks.CharBlock()\n    photo = ImageChooserBlock(required=False)\n    biography = blocks.RichTextBlock()\n\n    class Meta:\n        icon = 'user'\n</code></pre> <p>And then to use this on a Wagtail page the below example is shown.\u00a0 OK, that's not exactly what I was going for, but I believe it will get me there.\u00a0 The StreamField below shows many blocks within the StreamField, but I am looking to only add a single StructBlock.</p> <pre><code>\nbody = StreamField([\n    ('heading', blocks.CharBlock(form_classname=\"full title\")),\n    ('paragraph', blocks.RichTextBlock()),\n    ('image', ImageChooserBlock()),\n    ('person', PersonBlock()),\n])\n</code></pre>"},{"location":"blogs/Wagtail%20-%20How%20to%20add%20a%20List%20of%20Related%20Fields%20to%20a%20Page/#the-code","title":"The Code","text":"<p>So my actual solution was to create a StructBlock class that conatins a URLBlock and a RichTextBlock and then embed that into a StreamField on my page.\u00a0</p> <p>For the StructBlock class I created a new class called DescAndUrlBlock.\u00a0 First, in\u00a0this class I add a RichTextBlock called description, which I set required equal to True and added help text of 'Add your description'.\u00a0 Then I added the URLBlock called link, this is also set to requried equal True and has a help text of 'Add video URL'.\u00a0 Below this I add a meta class which contains the icon and a label.\u00a0 If you want to see all of the available icons in Wagtail, add 'wagtail.contrib.styleguide' to your settings.\u00a0 Then in your admin page you can navigate to Settings &gt; Styleguide and click on Icons to view all of the available choices.</p> <p>Below is the code -\u00a0</p> <pre><code>\nfrom wagtail.core import blocks\n\nclass DescAndUrlBlock(blocks.StructBlock):\n    \"\"\"Description and URL\"\"\"\n\n    description = blocks.RichTextBlock(required=True, help_text=\"Add your description\")\n    link = blocks.URLBlock(required=True, help_text=\"Add video URL\")\n\n    class Meta:\n        icon = \"snippet\"\n        label = \"Add a Video link and Description\"\n</code></pre> <p>Next I update my page, I imported StreamFieldPanel and StreamField from Wagtail, and imported the new DescAndUrlBlock that I had just created.\u00a0 In the page class I add the StreamField which takes in a list of tuples.\u00a0 Each tuple requires a desciption and a block (remember, I added a StrucBlock, which allows for more than one block).\u00a0 I also set null equal to False and blank equal to False.\u00a0 I created a meta class to give my page a name and plural name.\u00a0 Then I add my content element to the content_panels, here I use the StreamFieldPanel and pass in the content field.\u00a0 With that I have everything in place.</p> <pre><code>\nfrom wagtail.core.models import Page\nfrom wagtail.admin.edit_handlers import StreamFieldPanel\nfrom wagtail.core.fields import StreamField\n\nfrom .blocks import DescAndUrlBlock\n\nclass VideoPage(Page):\n    content = StreamField([\n        ('desc_and_url', DescAndUrlBlock())\n    ], null=False, blank=False)\n\n    class Meta:\n        verbose_name = \"Video Page\"\n        verbose_name_plural = \"Videos Pages\"\n\n    content_panels = Page.content_panels + [\n        StreamFieldPanel('content')\n    ]\n\n</code></pre>"},{"location":"blogs/Wagtail%20-%20How%20to%20add%20a%20List%20of%20Related%20Fields%20to%20a%20Page/#the-result","title":"The Result","text":"<p>Header\u00a0Photo by Jake Hills on Unsplash</p>"}]}